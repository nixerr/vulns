FROM ubuntu:xenial

RUN apt-get -y update && apt-get -y upgrade && apt-get -y install openssh-server git unzip tar net-tools tar xz-utils make

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Downloading and unpacking CMake and clang

WORKDIR /tools
RUN wget https://github.com/Kitware/CMake/releases/download/v3.26.1/cmake-3.26.1-linux-x86_64.tar.gz
RUN wget https://releases.llvm.org/8.0.0/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz

RUN tar xf cmake-3.26.1-linux-x86_64.tar.gz && tar xf clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz
ENV PATH="/tools/cmake-3.26.1-linux-x86_64/bin:/tools/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04/bin:$PATH"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Compiling and installing CCLS

# https://gist.github.com/jlblancoc/99521194aba975286c80f93e47966dc5
RUN apt-get install -y software-properties-common && \
    add-apt-repository ppa:ubuntu-toolchain-r/test && \
    apt update && \
    apt install g++-7 -y

RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 \
                         --slave /usr/bin/g++ g++ /usr/bin/g++-7
RUN update-alternatives --config gcc
RUN gcc --version
RUN g++ --version

# This one if you want the **all** toolchain programs (with the triplet names) to also point to gcc-7.
# For example, this is needed if building Debian packages.
# If you are already are root (e.g. inside a docker image), remove the "sudo" below.
RUN ls -la /usr/bin/ | grep -oP "[\S]*(gcc|g\+\+)(-[a-z]+)*[\s]" | xargs bash -c 'for link in ${@:1}; do ln -s -f "/usr/bin/${link}-${0}" "/usr/bin/${link}"; done' 7

RUN git clone --depth=1 --recursive https://github.com/MaskRay/ccls

RUN cd ccls && \
    cmake -H. -BRelease -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=/tools/cmake-3.26.1-linux-x86_64 && \
    cmake --build Release && \
    cd Release && \
    make install

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Compiling JSC with compile commands

ENV CC="clang"
ENV CXX="clang++"
ENV CXXFLAGS="-stdlib=libc++ -O0 -ggdb"
ENV CFLAGS="-O0 -ggdb"

# RUN wget https://github.com/hszhsh/JavaScriptCore/archive/refs/heads/master.zip
RUN git clone https://github.com/hszhsh/JavaScriptCore
RUN sed -i -e "s|apt-get install|apt-get -y install|g" /tools/JavaScriptCore/Tools/gtk/install-dependencies
RUN /tools/JavaScriptCore/Tools/gtk/install-dependencies
RUN cd JavaScriptCore && git reset --hard


RUN cd JavaScriptCore && \
    git checkout aa4c06d30b67a396f62c4888e9d80442e65dd656 && \
    sed -i -e 's|set(ENABLE_WEBCORE ON)|set(ENABLE_WEBCORE ON)\nset(CMAKE_EXPORT_COMPILE_COMMANDS 1)|' CMakeLists.txt && \
    ./Tools/Scripts/set-webkit-configuration --debug && \
    ./Tools/Scripts/build-jsc --jsc-only

RUN cd JavaScriptCore && ln -s WebKitBuild/Debug/compile_commands.json compile_commands.json

RUN sed -i -e 's|PermitRootLogin prohibit-password|PermitRootLogin yes|' /etc/ssh/sshd_config && \
    echo 'root:123' | chpasswd

RUN cd JavaScriptCore && \
    printf '%%compile_commands.json\n%%h -x\n%%h c++-header\n%%h --include=config.h\n%%cpp --include=config.h' > .ccls

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Installing code server for VSCode

RUN curl -fsSL https://code-server.dev/install.sh | sh
# Doesn't work. Have to install via VSCode
# RUN code-server --install-extension ccls-project.ccls

CMD ifconfig -a && /etc/init.d/ssh start && bash
